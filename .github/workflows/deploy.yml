name: Deploy to Oracle OCI

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: "24.x"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        run: |
          pnpm prisma migrate deploy
          pnpm prisma generate

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: pnpm test

      - name: Check formatting
        run: pnpm run format:check

      - name: Run linting
        run: pnpm run lint

      - name: Type check
        run: pnpm exec tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build application
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            .next
            node_modules
            prisma
            package.json
            pnpm-lock.yaml

  deploy:
    name: Deploy to Oracle OCI
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment script to OCI
        run: |
          scp scripts/deploy-oci.sh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }}:/opt/social-media-app/
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "chmod +x /opt/social-media-app/deploy-oci.sh"

      - name: Deploy to OCI
        run: |
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "cd /opt/social-media-app && ./deploy-oci.sh"

      - name: Health check
        run: |
          sleep 10
          curl -f ${{ secrets.APP_URL }}/api/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
