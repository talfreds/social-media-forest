name: Deploy to Oracle OCI

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: "24.x"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        run: |
          # Wait for database to be ready
          sleep 10
          pnpm prisma migrate deploy
          pnpm prisma generate

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: pnpm test

      - name: Check formatting
        run: pnpm run format:check

      - name: Run linting
        run: pnpm run lint

      - name: Type check
        run: pnpm exec tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build application
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          echo "Starting Next.js build..."
          pnpm run build
          BUILD_EXIT_CODE=$?
          echo "Build exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
            exit 1
          fi
          echo "✅ Build completed successfully"

      - name: Prepare build artifacts
        run: |
          echo "=== Preparing build artifacts for upload ==="
          echo "Checking .next directory:"
          if [ -d ".next" ]; then
            echo "✅ .next directory exists!"
            echo "Size of .next directory: $(du -sh .next/ | cut -f1)"
          else
            echo "❌ .next directory NOT FOUND - build may have failed!"
            exit 1
          fi

          echo ""
          echo "Creating tarball of build artifacts..."
          # Create tarball with all necessary files including hidden directories
          tar -czf build-artifacts.tar.gz \
            .next/ \
            prisma/ \
            public/ \
            package.json \
            pnpm-lock.yaml \
            next.config.ts

          echo "✅ Tarball created: $(du -sh build-artifacts.tar.gz | cut -f1)"
          echo "Contents of tarball:"
          tar -tzf build-artifacts.tar.gz | head -30

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build-artifacts.tar.gz
          retention-days: 1
          if-no-files-found: error
          compression-level: 0

  deploy:
    name: Deploy to Oracle OCI
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./

      - name: Extract and verify build artifacts
        run: |
          echo "=== Extracting Build Artifacts ==="
          if [ -f "build-artifacts.tar.gz" ]; then
            echo "✅ Tarball downloaded successfully"
            echo "Size: $(du -sh build-artifacts.tar.gz | cut -f1)"
          else
            echo "❌ ERROR: build-artifacts.tar.gz not found!"
            exit 1
          fi

          # Create build-artifacts directory and extract there
          mkdir -p ./build-artifacts
          tar -xzf build-artifacts.tar.gz -C ./build-artifacts/
          echo "✅ Tarball extracted"

          echo ""
          echo "=== Verifying Extracted Files ==="
          echo "Contents of build-artifacts directory:"
          ls -la ./build-artifacts/

          echo ""
          echo "=== Checking for .next directory ==="
          if [ -d "./build-artifacts/.next" ]; then
            echo "✅ .next directory found!"
            echo "Size: $(du -sh ./build-artifacts/.next/ | cut -f1)"
            echo "Files in .next:"
            ls -la ./build-artifacts/.next/ | head -20
          else
            echo "❌ ERROR: .next directory not found after extraction!"
            exit 1
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Copy build artifacts to OCI
        run: |
          echo "=== Copying Build Artifacts to OCI ==="

          # Create application directory if it doesn't exist
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "
            sudo mkdir -p /opt/social-media-app
            sudo chown ${{ secrets.OCI_USER }}:${{ secrets.OCI_USER }} /opt/social-media-app
          "

          echo "Starting rsync transfer..."
          rsync -avz --progress ./build-artifacts/ ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }}:/opt/social-media-app/
          echo "✅ Files transferred successfully"

          # Verify .next directory was copied
          echo ""
          echo "Verifying .next directory on remote server..."
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "
            if [ -d '/opt/social-media-app/.next' ]; then
              echo '✅ .next directory present on server'
              ls -la /opt/social-media-app/.next/ | head -10
            else
              echo '❌ ERROR: .next directory not found on server!'
              exit 1
            fi
          "

      - name: Copy deployment script to OCI
        run: |
          scp scripts/deploy-oci.sh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }}:/opt/social-media-app/
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "chmod +x /opt/social-media-app/deploy-oci.sh"

      - name: Deploy to OCI
        run: |
          ssh ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} "bash -l -c 'cd /opt/social-media-app && ./deploy-oci.sh'"

      - name: Final health check
        run: |
          # The deploy-oci.sh script already does extensive health checks
          # This is a final verification from outside the server
          echo "Waiting for application to stabilize..."
          sleep 5
          echo "Performing external health check..."
          curl -f ${{ secrets.APP_URL }}/api/health || exit 1
          echo "✅ Application is healthy and accessible externally"

      - name: Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
